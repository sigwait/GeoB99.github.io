<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on GeoB99 Website</title><link>https://sigwait.github.io/GeoB99.github.io/pages/doc/</link><description>Recent content in Documentation on GeoB99 Website</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 09 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sigwait.github.io/GeoB99.github.io/pages/doc/index.xml" rel="self" type="application/rss+xml"/><item><title>NTDLL Tree</title><link>https://sigwait.github.io/GeoB99.github.io/pages/doc/ntdll-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sigwait.github.io/GeoB99.github.io/pages/doc/ntdll-tree/</guid><description>Native API user-mode layer (NTDLL) layout source tree The Native API, serving the purpose as a system call interface for subsystem environments, provides the Rtl section known as the Run-Time library as well as Loader and SxS (Side-by-Side Assembly) module source codes. The base library service of the Windows subsystem, Kernel32.dll, makes a call into NTDLL which in turn invokes a specific kernel mode service in the NT kernel to accomplish a request.</description></item><item><title>User32 Tree</title><link>https://sigwait.github.io/GeoB99.github.io/pages/doc/user32-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sigwait.github.io/GeoB99.github.io/pages/doc/user32-tree/</guid><description>User32 user-mode library layout tree User32.dll is a user mode DLL library that provides windowing manager APIs to the client. An example of a call brought by the said library is CreateWindowExW which creates a window with extended styles. The documented function calls in the User32.dll library rely on undocumented internal functions in Win32k, the kernel mode side of the Windows subsystem.
d: nt windows (Windows Subsystem) core (Core Windows Kernel Subsystem) ntuser (Native USER Window Manager) client (USER user-mode library) acons.</description></item><item><title>Win32K Tree</title><link>https://sigwait.github.io/GeoB99.github.io/pages/doc/win32k-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sigwait.github.io/GeoB99.github.io/pages/doc/win32k-tree/</guid><description>Windows Subsystem Kernel layout tree The Windows subsystem environment is divided amongst two chunks that make up the entirety of the said subsystem. The user mode, with client libraries used by applications and components that interact within the user mode space (Kernel32.dll, Gdi32.dll, User32.dll et al) and a large portion being the kernel mode. The latter portion is in itself left undocumented, with no major details or explanation provided about the inner implementation of the kernel mode side.</description></item><item><title>Winsrv layout tree</title><link>https://sigwait.github.io/GeoB99.github.io/pages/doc/winsrv-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sigwait.github.io/GeoB99.github.io/pages/doc/winsrv-tree/</guid><description>Windows USER + Console server library layout tree Nothing much has to be said about this library. Winsrv.dll is all but a provider for server intercommunication support for console and window manager environment. That is, the server being the kernel mode realm of the Windows subsystem environment (as usual Winsrv.dll relies on Win32k). Speaking of the window manager environment, some fundamental aspects of Winsrv.dll are the hard-error implementation, shutdown/logout notification mechanism and windowing message communication.</description></item></channel></rss>